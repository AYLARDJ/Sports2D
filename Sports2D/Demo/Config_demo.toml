###############################################################################
## SPORTS2D PROJECT PARAMETERS                                               ##
###############################################################################

# Configure your project parameters here

# Then open an Anaconda prompt and enter:
# conda activate Sports2D
# ipython
# from Sports2D import Sports2D
# Sports2D.detect_pose('Config_demo.toml')
# Sports2D.compute_angles('Config_demo.toml')


[project]
video_dir = '' # BETWEEN SINGLE QUOTES! # If empty, result dir is current dir
video_files = 'demo.mp4' # video file (e.g.: 'demo.mp4') or list of video files (e.g.: ['demo.mp4', 'other.mov'])
result_dir = '' # BETWEEN SINGLE QUOTES! # If empty, project dir is current dir


[pose]
data_type = "webcam"
video_path = "path/to/your/video.mp4"
det_frequency = 1
mode = "lightweight"
keypoints_threshold = 0.1
tracking = true
to_openpose = false
display_detection = true
frame_range = []

[webcam] 
cam_id = 1 # 0 is default, it will use your first webcam.
width = 1280 # high resolution would be better pose estimation, but low fps
height = 720 # high resolution would be better pose estimation, but low fps

	

[compute_angles]
# Select joint angles among
# ['Right ankle', 'Left ankle', 'Right knee', 'Left knee', 'Right hip', 'Left hip', 'Right shoulder', 'Left shoulder', 'Right elbow', 'Left elbow', 'Right wrist', 'Left wrist']
joint_angles = ['Right ankle', 'Left ankle', 'Right knee', 'Left knee', 'Right hip', 'Left hip', 'Right shoulder', 'Left shoulder', 'Right elbow', 'Left elbow']

# Select segment angles among
# ['Right foot', 'Left foot', 'Right shank', 'Left shank', 'Right thigh', 'Left thigh', 'Trunk', 'Right arm', 'Left arm', 'Right forearm', 'Left forearm', 'Right hand', 'Left hand']
segment_angles = ['Right foot', 'Left foot', 'Right shank', 'Left shank', 'Right thigh', 'Left thigh', 'Trunk', 'Right arm', 'Left arm', 'Right forearm', 'Left forearm']

   	
	

# ADVANCED CONFIGURATION
	
[pose_advanced] # only for OPENPOSE
overwrite_pose = true # If false, don't run openpose again if json pose files are found.
save_vid = true
save_img = true
interp_gap_smaller_than = 5 # do not interpolate bigger gaps
filter = true
show_plots = true
filter_type = 'butterworth' # butterworth, gaussian, LOESS, median
   [pose_advanced.butterworth]
   order = 4 
   cut_off_frequency = 6 # Hz
   [pose_advanced.gaussian]
   sigma_kernel = 1 #px
   [pose_advanced.loess]
   nb_values_used = 5 # = fraction of data used * nb frames
   [pose_advanced.median]
   kernel_size = 3


[compute_angles_advanced] # for OPENPOSE and BLAZEPOSE
show_angles_on_img = true
show_angles_on_vid = true
filter = true
show_plots = true
flip_left_right = true # Same angles whether the participant faces left/right. Set it to false if you want timeseries to be continuous even when the participent switches their stance.
filter_type = 'butterworth' # butterworth, gaussian, LOESS, median
   [compute_angles_advanced.butterworth]
   order = 4 
   cut_off_frequency = 6 # Hz
   [compute_angles_advanced.gaussian]
   sigma_kernel = 1 #px
   [compute_angles_advanced.loess]
   nb_values_used = 5 # = fraction of data used * nb frames
   [compute_angles_advanced.median]
   kernel_size = 3
